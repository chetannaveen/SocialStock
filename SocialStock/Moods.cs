// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SocialStock.Moods;
//
//    var moods = Moods.FromJson(jsonString);

namespace SocialStock.MoodsNameSpace
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Moods
    {
        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("copyright", NullValueHandling = NullValueHandling.Ignore)]
        public string Copyright { get; set; }

        [JsonProperty("section", NullValueHandling = NullValueHandling.Ignore)]
        public string Section { get; set; }

        [JsonProperty("last_updated", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastUpdated { get; set; }

        [JsonProperty("num_results", NullValueHandling = NullValueHandling.Ignore)]
        public long? NumResults { get; set; }

        [JsonProperty("results", NullValueHandling = NullValueHandling.Ignore)]
        public Result[] Results { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("section", NullValueHandling = NullValueHandling.Ignore)]
        public string Section { get; set; }

        [JsonProperty("subsection", NullValueHandling = NullValueHandling.Ignore)]
        public string Subsection { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("abstract", NullValueHandling = NullValueHandling.Ignore)]
        public string Abstract { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("uri", NullValueHandling = NullValueHandling.Ignore)]
        public string Uri { get; set; }

        [JsonProperty("byline", NullValueHandling = NullValueHandling.Ignore)]
        public string Byline { get; set; }

        [JsonProperty("item_type", NullValueHandling = NullValueHandling.Ignore)]
        public string ItemType { get; set; }

        [JsonProperty("updated_date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedDate { get; set; }

        [JsonProperty("created_date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedDate { get; set; }

        [JsonProperty("published_date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PublishedDate { get; set; }

        [JsonProperty("material_type_facet", NullValueHandling = NullValueHandling.Ignore)]
        public string MaterialTypeFacet { get; set; }

        [JsonProperty("kicker", NullValueHandling = NullValueHandling.Ignore)]
        public string Kicker { get; set; }

        [JsonProperty("des_facet", NullValueHandling = NullValueHandling.Ignore)]
        public string[] DesFacet { get; set; }

        [JsonProperty("org_facet", NullValueHandling = NullValueHandling.Ignore)]
        public string[] OrgFacet { get; set; }

        [JsonProperty("per_facet", NullValueHandling = NullValueHandling.Ignore)]
        public string[] PerFacet { get; set; }

        [JsonProperty("geo_facet", NullValueHandling = NullValueHandling.Ignore)]
        public string[] GeoFacet { get; set; }

        [JsonProperty("multimedia", NullValueHandling = NullValueHandling.Ignore)]
        public Multimedia[] Multimedia { get; set; }

        [JsonProperty("short_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ShortUrl { get; set; }
    }

    public partial class Multimedia
    {
        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public string Format { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public long? Height { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public long? Width { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("subtype", NullValueHandling = NullValueHandling.Ignore)]
        public string Subtype { get; set; }

        [JsonProperty("caption", NullValueHandling = NullValueHandling.Ignore)]
        public string Caption { get; set; }

        [JsonProperty("copyright", NullValueHandling = NullValueHandling.Ignore)]
        public string Copyright { get; set; }
    }

    public partial class Moods
    {
        public static Moods FromJson(string json) => JsonConvert.DeserializeObject<Moods>(json, SocialStock.MoodsNameSpace.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Moods self) => JsonConvert.SerializeObject(self, SocialStock.MoodsNameSpace.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
